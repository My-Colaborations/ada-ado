## The type of library we want to build. Possible values:
##   relocatable
##   static
LIBRARY_TYPE=static

# You may edit this makefile as long as you keep these original 
# target names defined.
MODE=debug
GNATMAKE=@GNATMAKE@
GNATMAKE=gnatmake -XMODE=${MODE}
GNATCLEAN=gnatclean
SVN=svn
INSTALL=@INSTALL@

GPRPATH=ado_core.gpr
ADO_MYSQL_GPRPATH=ado_mysql.gpr
ADO_SQLITE_GPRPATH=ado_sqlite.gpr

version=@ADO_VERSION@

distdir=ada-ado-@ADO_VERSION@

BUILDS_SHARED=@BUILDS_SHARED@

DIST_FILE=ada-ado-@ADO_VERSION@.tar.gz

HAVE_MYSQL=@ADO_HAVE_MYSQL@
HAVE_SQLITE=@ADO_HAVE_SQLITE@

MYSQL_LIBNAME=@MYSQL_LIBNAME@

LN_S=@LN_S@
MKDIR=mkdir
CP=cp
LN=ln -s

ifeq (${OS},Windows_NT)
LIBEXT=dll
LIBVER=dll
else
LIBEXT=so
LIBVER=so.$(version)
endif

srcdir = .
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
top_builddir = .

dynamodir=${prefix}/share/dynamo
includedir=${prefix}/share/ada/adainclude
projectdir=${prefix}/share/ada/adainclude
libdir=${prefix}/lib
alidir=${libdir}/ada/adalib/

CPUS := $(shell getconf _NPROCESSORS_ONLN)
MAKE_ARGS=-XMODE=${MODE} -XLIBRARY_TYPE=${LIBRARY_TYPE} -XPROCESSORS=$(CPUS)

mysql_src_dir=${srcdir}/src/mysql
sqlite_src_dir=${srcdir}/src/sqlite

ifeq (${BUILDS_SHARED},yes)
all:     static shared
install: install_static install_shared
else
all:     static
install: install_static
endif

# Build executables for all mains defined by the project.
build:  src/drivers/ado-drivers-initializer.adb src/mysql/mysql-lib.ads regtests/ado-testsuite-drivers.adb
	$(GNATMAKE) -m -p -P"$(GPRPATH)" $(MAKE_ARGS)
	test T${HAVE_SQLITE} = Tno || $(GNATMAKE) -m -p -P"$(ADO_SQLITE_GPRPATH)" $(MAKE_ARGS)
	test T${HAVE_MYSQL} = Tno || $(GNATMAKE) -m -p -P"$(ADO_MYSQL_GPRPATH)" $(MAKE_ARGS)
	$(GNATMAKE) -m -p -Ptests $(MAKE_ARGS)

static:
	$(MAKE) LIBRARY_TYPE=static build

shared:
	$(MAKE) LIBRARY_TYPE=relocatable build

# Not intended for manual invocation.
# Invoked if automatic builds are enabled.
# Analyzes only on those sources that have changed.
# Does not build executables.
autobuild:
	$(GNATMAKE) -gnatc -c -k  -P "$(GPRPATH)"

# Configure the driver file
src/drivers/ado-drivers-initializer.adb: src/drivers/ado-drivers-initializer.gpb Makefile
	mysql=`(test T$(HAVE_MYSQL) = Tyes && echo True) || echo False`; \
	sqlite=`(test T$(HAVE_SQLITE) = Tyes && echo True) || echo False`; \
	gnatprep -DHAVE_MYSQL=$$mysql \
	          -DHAVE_SQLITE=$$sqlite \
		  src/drivers/ado-drivers-initializer.gpb $@

src/mysql/mysql-lib.ads: src/mysql/mysql-lib.gpb Makefile
	gnatprep -DMYSQL_LIB='"-l$(MYSQL_LIBNAME)"' src/mysql/mysql-lib.gpb $@

regtests/ado-testsuite-drivers.adb: regtests/ado-testsuite-drivers.gpb Makefile
	mysql=`(test T$(HAVE_MYSQL) = Tyes && echo True) || echo False`; \
	sqlite=`(test T$(HAVE_SQLITE) = Tyes && echo True) || echo False`; \
	gnatprep -DHAVE_MYSQL=$$mysql \
	         -DHAVE_SQLITE=$$sqlite \
		 regtests/ado-testsuite-drivers.gpb $@

# Build and run the unit tests
test:	test-sqlite test-mysql

test-sqlite:		build regtests.db
	-test T${HAVE_SQLITE} = TFalse || \
	bin/ado_harness -p SQLite -t 120 -xml ado-sqlite-aunit.xml -config test-sqlite.properties

test-mysql:		build create-mysql-tests
	-test T${HAVE_MYSQL} = TFalse || \
	bin/ado_harness -p MySQL -xml ado-mysql-aunit.xml -config test-mysql.properties

# Clean the root project of all build products.
clean:
	-$(GNATCLEAN) -q -P "$(GPRPATH)" -XLIBRARY_TYPE=static
	-$(GNATCLEAN) -q -P "$(GPRPATH)" -XLIBRARY_TYPE=relocatable
	-$(GNATCLEAN) -q -Ptests
	-$(GNATCLEAN) -q -Psamples
	-rm -rf lib/ado lib/ado-mysql lib/ado-sqlite
	-rm -rf obj/ado obj/ado-mysql obj/ado-sqlite

# Clean root project and all imported projects too.
clean_tree:
	$(GNATCLEAN) -P "$(GPRPATH)" -r

# Check *all* sources for errors, even those not changed.
# Does not build executables.
analyze:
	$(GNATMAKE) -f  -gnatc -c -k  -P "$(GPRPATH)"

# Clean, then build executables for all mains defined by the project.
rebuild: clean build

GENERATOR=dynamo

generate:
	$(GENERATOR) generate db
	$(GENERATOR) generate db/regtests
	$(GENERATOR) generate db/samples

# Create the test sqlite database
regtests.db:
	test T${HAVE_SQLITE} = TFalse || \
	sqlite3 $@ < db/regtests/sqlite/create-ado-sqlite.sql

# Create the samples sqlite database
samples.db:
	test T${HAVE_SQLITE} = TFalse || \
	sqlite3 $@ < db/samples/sqlite/create-ado-sqlite.sql

# Create the tables in the database.
# (The database itself must have been created)
create-mysql-tests:
	-test T${HAVE_MYSQL} = TFalse || \
	mysql --defaults-extra-file=db/regtests/mysql/mysql.cnf < db/regtests/mysql/drop-ado-mysql.sql
	test T${HAVE_MYSQL} = TFalse || \
	mysql --defaults-extra-file=db/regtests/mysql/mysql.cnf < db/regtests/mysql/create-ado-mysql.sql

# Files to package in source distribution
DISTFILES=README LICENSE.txt NOTICE.txt CHANGES ChangeLog NEWS config.guess configure config.sub \
configure.in Makefile.in install-sh \
ado.gpr.in ado_core.gpr.in ado_mysql.gpr ado_sqlite.gpr tests.gpr.in samples.gpr.in config.gpr \
src samples regtests db win32 \
distrib test-mysql.properties test-sqlite.properties dynamo.xml

dist:
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	rm -f $(distdir)/distrib/*.gpr
	rm -rf $(distdir)/regtests/result
	mkdir $(distdir)/bin
	mkdir $(distdir)/obj
	mkdir $(distdir)/lib
	tar --exclude=.svn --exclude="*~" --exclude="*.o" --exclude="*.ali" \
	    --exclude="*.log" --exclude="*.a" \
	    -cvzf $(DIST_FILE) $(distdir)

install_static:
	$(MAKE) LIBRARY_TYPE=static install_lib

install_shared:
	$(MAKE) LIBRARY_TYPE=relocatable install_lib

install_lib:
	$(MKDIR) -p ${includedir}/ada-ado
	$(MKDIR) -p ${includedir}/ada-ado-drivers
	$(MKDIR) -p ${projectdir}/
	${MKDIR} -p ${alidir}/ada-ado
	${MKDIR} -p ${alidir}/ada-ado-drivers
	${MKDIR} -p ${dynamodir}/ado/db
	test T${HAVE_MYSQL} = TFalse || ${MKDIR} -p ${dynamodir}/ado/db/mysql
	test T${HAVE_SQLITE} = TFalse || ${MKDIR} -p ${dynamodir}/ado/db/sqlite
	test T${HAVE_MYSQL} = TFalse || ${MKDIR} -p ${includedir}/ada-ado-mysql
	test T${HAVE_SQLITE} = TFalse || ${MKDIR} -p ${includedir}/ada-ado-sqlite
	test T${HAVE_MYSQL} = TFalse || ${MKDIR} -p ${alidir}/ada-ado-mysql
	test T${HAVE_SQLITE} = TFalse || ${MKDIR} -p ${alidir}/ada-ado-sqlite
	${CP} -p src/*.ad[bs] ${includedir}/ada-ado
	test T${HAVE_MYSQL} = TFalse || ${CP} -p ${mysql_src_dir}/*.ad[bs] ${includedir}/ada-ado-mysql
	test T${HAVE_SQLITE} = TFalse || ${CP} -p ${sqlite_src_dir}/*.ad[bs] ${includedir}/ada-ado-sqlite
	${CP} -p src/model/*.ad[bs] ${includedir}/ada-ado
	sed -e "s,INSTALL,${prefix},g" -e "s,LIBRARY_TYPE,$(LIBRARY_TYPE),g" < distrib/ado.gpr > ${projectdir}/ado.gpr
	sed -e "s,INSTALL,${prefix},g" -e "s,LIBRARY_TYPE,$(LIBRARY_TYPE),g" \
		< distrib/ado_mysql.gpr > ${projectdir}/ado_mysql.gpr
	sed -e "s,INSTALL,${prefix},g" -e "s,LIBRARY_TYPE,$(LIBRARY_TYPE),g" \
		< distrib/ado_sqlite.gpr > ${projectdir}/ado_sqlite.gpr
	sed -e "s,INSTALL,${prefix},g" -e "s,LIBRARY_TYPE,$(LIBRARY_TYPE),g" \
		< distrib/ado_core.gpr > ${projectdir}/ado_core.gpr
	${CP} db/*.xml ${dynamodir}/ado/db/
	test T${HAVE_MYSQL} = TFalse || ${CP} db/mysql/*.sql ${dynamodir}/ado/db/mysql
	test T${HAVE_SQLITE} = TFalse || ${CP} db/sqlite/*.sql ${dynamodir}/ado/db/sqlite
	${CP} dynamo.xml ${dynamodir}/ado/
	${CP} NOTICE.txt ${dynamodir}/ado/
	${CP} LICENSE.txt ${dynamodir}/ado/
	${CP} lib/ado/$(LIBRARY_TYPE)/*.ali ${alidir}/ada-ado
	test T${HAVE_MYSQL} = TFalse || ${CP} lib/ado-mysql/$(LIBRARY_TYPE)/*.ali ${alidir}/ada-ado-mysql
	test T${HAVE_SQLITE} = TFalse || ${CP} lib/ado-sqlite/$(LIBRARY_TYPE)/*.ali ${alidir}/ada-ado-mysql
ifeq ($(LIBRARY_TYPE),static)
	${CP} lib/ado/$(LIBRARY_TYPE)/libada-ado.a ${libdir}/
	test T${HAVE_MYSQL} = TFalse || ${CP} lib/ado-mysql/$(LIBRARY_TYPE)/libada-ado-mysql.a ${libdir}/
	test T${HAVE_SQLITE} = TFalse || ${CP} lib/ado-sqlite/$(LIBRARY_TYPE)/libada-ado-sqlite.a ${libdir}/
else
	${CP} -p lib/ado/$(LIBRARY_TYPE)/libada-ado.$(LIBVER) ${libdir}/
	test T${HAVE_MYSQL} = TFalse || ${CP} -p lib/ado-mysql/$(LIBRARY_TYPE)/libada-ado-mysql.$(LIBVER) ${libdir}/
	test T${HAVE_SQLITE} = TFalse || ${CP} -p lib/ado-sqlite/$(LIBRARY_TYPE)/libada-ado-sqlite.$(LIBVER) ${libdir}/
	cd ${libdir} && \
	rm -f libada-ado.$(LIBEXT) && \
	${LN} libada-ado.$(LIBVER) libada-ado.$(LIBEXT)
endif

uninstall:
	rm -rf ${includedir}/ado
	rm -f ${libdir}/libada-ado.a
	rm -f ${libdir}/libada-ado-mysql.a
	rm -f ${libdir}/libada-ado-sqlite.a
	rm -f ${libdir}/libada-ado.so.${version}
	rm -f ${libdir}/libada-ado-mysql.so.${version}
	rm -f ${libdir}/libada-ado-sqlite.so.${version}
	rm -f ${projectdir}/ado.gpr
	rm -f ${projectdir}/ado_core.gpr
	rm -f ${projectdir}/ado_mysql.gpr
	rm -f ${projectdir}/ado_sqlite.gpr

# prepare before releasing a new version of the package
# (collect information about changes and SVN repository)
prepare-release:
	${SVN} update
	${SVN} info > CHANGES
	${SVN} log -v > ChangeLog
