# You may edit this makefile as long as you keep these original 
# target names defined.
MODE=debug
GNATMAKE=gnatmake -XMODE=${MODE} -XPROCESSORS=4
GNATCLEAN=gnatclean
GPRPATH=ado.gpr

distdir=ado-@ADO_VERSION@

DIST_FILE=ado-@ADO_VERSION@.tar.gz

HAVE_MYSQL=@ADO_DB_MYSQL@
HAVE_SQLITE=@ADO_DB_SQLITE@

MKDIR=mkdir
CP=cp

srcdir = .
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
top_builddir = .

includedir=${prefix}/share/ada/adainclude
projectdir=${prefix}/share/ada/adainclude
libdir=${prefix}/lib
alidir=${prefix}/share/ada/adainclude

# Build executables for all mains defined by the project.
build:  src/ado-drivers-initialize.adb
	$(GNATMAKE) -p -P "$(GPRPATH)"

# Not intended for manual invocation.
# Invoked if automatic builds are enabled.
# Analyzes only on those sources that have changed.
# Does not build executables.
autobuild:
	$(GNATMAKE) -gnatc -c -k  -P "$(GPRPATH)"

# Configure the driver file
src/ado-drivers-initialize.adb: src/ado-drivers-initialize.gpb Makefile
	gnatprep -DHAVE_MYSQL=$(HAVE_MYSQL) \
	          -DHAVE_SQLITE=$(HAVE_SQLITE) \
		  src/ado-drivers-initialize.gpb src/ado-drivers-initialize.adb

# Build and run the unit tests
test:	build
	$(GNATMAKE) -p -Ptests
	bin/ado_harness -config tests.properties

# Clean the root project of all build products.
clean:
	$(GNATCLEAN) -q -P "$(GPRPATH)"

# Clean root project and all imported projects too.
clean_tree:
	$(GNATCLEAN) -P "$(GPRPATH)" -r

# Check *all* sources for errors, even those not changed.
# Does not build executables.
analyze:
	$(GNATMAKE) -f  -gnatc -c -k  -P "$(GPRPATH)"

# Clean, then build executables for all mains defined by the project.
rebuild: clean build

GENERATOR=dynamo

generate:
	$(GENERATOR) generate

# Files to package in source distribution
DISTFILES=README LICENSE.txt NOTICE.txt CHANGES config.guess configure config.sub \
configure.in Makefile.in install-sh \
ado.gpr.in tests.gpr.in samples.gpr.in config.gpr \
src samples regtests \
bin obj lib

dist:
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	-rm -f $(distdir)/bin/*
	-rm -f $(distdir)/obj/*
	tar --exclude=.svn --exclude="*~" --exclude="*.o" --exclude="*.ali" \
	    --exclude="*.log" --exclude="*.a" \
	    -cvzf $(DIST_FILE) $(distdir)
